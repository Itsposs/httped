!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
MAX_QUEUE	ThreadPool.h	/^const int MAX_QUEUE = 65535;$/;"	v
MAX_THREADS	ThreadPool.h	/^const int MAX_THREADS = 1024;$/;"	v
MutexLock	MutexLock.h	/^		class MutexLock ï¼š $/;"	c	namespace:threadpool::lock
Noncopyable	Noncopyable.h	/^		class Noncopyable$/;"	c	namespace:tp::util
QUEUE_SIZE	Main.cpp	/^const int QUEUE_SIZE = 65535;$/;"	v
THREADPOOL_GRACEFUL	ThreadPool.h	/^const int THREADPOOL_GRACEFUL = 1;$/;"	v
THREADPOOL_INVALID	ThreadPool.h	/^const int THREADPOOL_INVALID = -1;$/;"	v
THREADPOOL_LOCK_FAILURE	ThreadPool.h	/^const int THREADPOOL_LOCK_FAILURE = -2;$/;"	v
THREADPOOL_QUEUE_FULL	ThreadPool.h	/^const int THREADPOOL_QUEUE_FULL = -3;$/;"	v
THREADPOOL_SHUTDOWN	ThreadPool.h	/^const int THREADPOOL_SHUTDOWN = -4;$/;"	v
THREADPOOL_THREAD_FAILURE	ThreadPool.h	/^const int THREADPOOL_THREAD_FAILURE = -5;$/;"	v
THREADPOOL_THREAD_NUM	Main.cpp	/^const int THREADPOOL_THREAD_NUM = 4;$/;"	v
_CONDITTION_H_	Condition.h	4;"	d
_MUTEXLOCK_H_	MutexLock.h	4;"	d
_NONCOPYABLE_H_	Noncopyable.h	4;"	d
_THREADPOOL_H_	ThreadPool.h	4;"	d
argument	ThreadPool.h	/^    void *argument;$/;"	m	struct:__anon2
count	ThreadPool.h	/^    int count;$/;"	m	struct:threadpool_t
function	ThreadPool.h	/^    void (*function)(void *);$/;"	m	struct:__anon2
graceful_shutdown	ThreadPool.h	/^    graceful_shutdown  = 2$/;"	e	enum:__anon1
head	ThreadPool.h	/^    int head;$/;"	m	struct:threadpool_t
hello	Main.cpp	/^void hello(void *args)$/;"	f
immediate_shutdown	ThreadPool.h	/^    immediate_shutdown = 1,$/;"	e	enum:__anon1
lock	MutexLock.h	/^	namespace lock$/;"	n	namespace:threadpool
lock	ThreadPool.h	/^    pthread_mutex_t lock;$/;"	m	struct:threadpool_t
main	Main.cpp	/^int main(int argc, char *argv[])$/;"	f
notify	ThreadPool.h	/^    pthread_cond_t notify;$/;"	m	struct:threadpool_t
queue	ThreadPool.h	/^    threadpool_task_t *queue;$/;"	m	struct:threadpool_t
queue_size	ThreadPool.h	/^    int queue_size;$/;"	m	struct:threadpool_t
rhs	Noncopyable.h	/^				Noncopyable& operator=(const Noncopyable &rhs) = delete;$/;"	m	class:tp::util::Noncopyable
rhs	Noncopyable.h	/^				Noncopyable(const Noncopyable &rhs) = delete;$/;"	m	class:tp::util::Noncopyable
shutdown	ThreadPool.h	/^    int shutdown;$/;"	m	struct:threadpool_t
started	ThreadPool.h	/^    int started;$/;"	m	struct:threadpool_t
tail	ThreadPool.h	/^    int tail;$/;"	m	struct:threadpool_t
thread_count	ThreadPool.h	/^    int thread_count;$/;"	m	struct:threadpool_t
threadpool	Condition.h	/^namespace threadpool$/;"	n
threadpool	MutexLock.h	/^inline namespace threadpool$/;"	n
threadpool_add	ThreadPool.cpp	/^int threadpool_add(threadpool_t *pool, void (*function)(void *), void *argument, int flags)$/;"	f
threadpool_create	ThreadPool.cpp	/^threadpool_t *threadpool_create(int thread_count, int queue_size, int flags)$/;"	f
threadpool_destroy	ThreadPool.cpp	/^int threadpool_destroy(threadpool_t *pool, int flags)$/;"	f
threadpool_free	ThreadPool.cpp	/^int threadpool_free(threadpool_t *pool)$/;"	f
threadpool_shutdown_t	ThreadPool.h	/^} threadpool_shutdown_t;$/;"	t	typeref:enum:__anon1
threadpool_t	ThreadPool.h	/^struct threadpool_t$/;"	s
threadpool_task_t	ThreadPool.h	/^} threadpool_task_t;$/;"	t	typeref:struct:__anon2
threadpool_thread	ThreadPool.cpp	/^static void *threadpool_thread(void *threadpool)$/;"	f	file:
threads	ThreadPool.h	/^    pthread_t *threads;$/;"	m	struct:threadpool_t
tp	Noncopyable.h	/^inline namespace tp$/;"	n
util	Noncopyable.h	/^	namespace util$/;"	n	namespace:tp
