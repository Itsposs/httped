!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AGAIN_MAX_TIMES	requestData.h	/^const int AGAIN_MAX_TIMES = 200;$/;"	v
ANALYSIS_ERROR	requestData.h	/^const int ANALYSIS_ERROR = -2;$/;"	v
ANALYSIS_SUCCESS	requestData.h	/^const int ANALYSIS_SUCCESS = 0;$/;"	v
ASK_IMAGE_STITCH	main.cpp	/^const int ASK_IMAGE_STITCH = 2;$/;"	v
ASK_STATIC_FILE	main.cpp	/^const int ASK_STATIC_FILE = 1;$/;"	v
CC	Makefile	/^CC      := g++$/;"	m
CFLAGS	Makefile	/^CFLAGS  := -std=c++11 -g -Wall -O3 $(INCLUDE)$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS:= $(CFLAGS)$/;"	m
EPOLL_WAIT_TIME	requestData.h	/^const int EPOLL_WAIT_TIME = 500;$/;"	v
EVENTPOLL	epoll.h	2;"	d
HTTP_10	requestData.h	/^const int HTTP_10 = 1;$/;"	v
HTTP_11	requestData.h	/^const int HTTP_11 = 2;$/;"	v
HTTPversion	requestData.h	/^		int HTTPversion;$/;"	m	class:requestData
HeadersState	requestData.h	/^enum HeadersState$/;"	g
INCLUDE	Makefile	/^INCLUDE:= -I.\/usr\/local\/include\/opencv$/;"	m
LIBS	Makefile	/^LIBS    := -lpthread -lopencv_core -lopencv_imgproc -lopencv_highgui$/;"	m
LISTENQ	epoll.h	/^const int LISTENQ = 1024;$/;"	v
MAXEVENTS	epoll.h	/^const int MAXEVENTS = 5000;$/;"	v
MAX_BUFF	requestData.h	/^const int MAX_BUFF = 4096;$/;"	v
MAX_QUEUE	threadpool.h	/^const int MAX_QUEUE = 65535;$/;"	v
MAX_THREADS	threadpool.h	/^const int MAX_THREADS = 1024;$/;"	v
METHOD_GET	requestData.h	/^const int METHOD_GET = 2;$/;"	v
METHOD_POST	requestData.h	/^const int METHOD_POST = 1;$/;"	v
MimeType	requestData.h	/^class MimeType$/;"	c
OBJS	Makefile	/^OBJS    := $(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$(SOURCE)))$/;"	m
PARSE_HEADER_AGAIN	requestData.h	/^const int PARSE_HEADER_AGAIN = -1;$/;"	v
PARSE_HEADER_ERROR	requestData.h	/^const int PARSE_HEADER_ERROR = -2;$/;"	v
PARSE_HEADER_SUCCESS	requestData.h	/^const int PARSE_HEADER_SUCCESS = 0;$/;"	v
PARSE_URI_AGAIN	requestData.h	/^const int PARSE_URI_AGAIN = -1;$/;"	v
PARSE_URI_ERROR	requestData.h	/^const int PARSE_URI_ERROR = -2;$/;"	v
PARSE_URI_SUCCESS	requestData.h	/^const int PARSE_URI_SUCCESS = 0;$/;"	v
PATH	main.cpp	/^const string PATH = "\/";$/;"	v
PORT	main.cpp	/^const int PORT = 8000;$/;"	v
QUEUE_SIZE	main.cpp	/^const int QUEUE_SIZE = 65535;$/;"	v
REQUESTDATA	requestData.h	2;"	d
SOURCE	Makefile	/^SOURCE  := $(wildcard *.cpp)$/;"	m
STATE_ANALYSIS	requestData.h	/^const int STATE_ANALYSIS = 4;$/;"	v
STATE_FINISH	requestData.h	/^const int STATE_FINISH = 5;$/;"	v
STATE_PARSE_HEADERS	requestData.h	/^const int STATE_PARSE_HEADERS = 2;$/;"	v
STATE_PARSE_URI	requestData.h	/^const int STATE_PARSE_URI = 1;$/;"	v
STATE_RECV_BODY	requestData.h	/^const int STATE_RECV_BODY = 3;$/;"	v
TARGET	Makefile	/^TARGET  := myserver$/;"	m
THREADPOOL	threadpool.h	2;"	d
THREADPOOL_GRACEFUL	threadpool.h	/^const int THREADPOOL_GRACEFUL = 1;$/;"	v
THREADPOOL_INVALID	threadpool.h	/^const int THREADPOOL_INVALID = -1;$/;"	v
THREADPOOL_LOCK_FAILURE	threadpool.h	/^const int THREADPOOL_LOCK_FAILURE = -2;$/;"	v
THREADPOOL_QUEUE_FULL	threadpool.h	/^const int THREADPOOL_QUEUE_FULL = -3;$/;"	v
THREADPOOL_SHUTDOWN	threadpool.h	/^const int THREADPOOL_SHUTDOWN = -4;$/;"	v
THREADPOOL_THREAD_FAILURE	threadpool.h	/^const int THREADPOOL_THREAD_FAILURE = -5;$/;"	v
THREADPOOL_THREAD_NUM	main.cpp	/^const int THREADPOOL_THREAD_NUM = 4;$/;"	v
TIMER_TIME_OUT	main.cpp	/^const int TIMER_TIME_OUT = 500;$/;"	v
UTIL	util.h	2;"	d
acceptConnection	main.cpp	/^void acceptConnection(int listen_fd, int epoll_fd, const string &path)$/;"	f
addTimer	requestData.cpp	/^void requestData::addTimer(mytimer *mtimer)$/;"	f	class:requestData
againTimes	requestData.h	/^		int againTimes;$/;"	m	class:requestData
analysisRequest	requestData.cpp	/^int requestData::analysisRequest()$/;"	f	class:requestData
argument	threadpool.h	/^    void *argument;$/;"	m	struct:__anon2
clearReq	requestData.cpp	/^void mytimer::clearReq()$/;"	f	class:mytimer
content	requestData.h	/^		std::string content;$/;"	m	class:requestData
count	threadpool.h	/^    int count;$/;"	m	struct:threadpool_t
deleted	requestData.h	/^    bool deleted;$/;"	m	struct:mytimer
epoll_add	epoll.cpp	/^int epoll_add(int epoll_fd, int fd, void *request, __uint32_t events)$/;"	f
epoll_del	epoll.cpp	/^int epoll_del(int epoll_fd, int fd, void *request, __uint32_t events)$/;"	f
epoll_init	epoll.cpp	/^int epoll_init()$/;"	f
epoll_mod	epoll.cpp	/^int epoll_mod(int epoll_fd, int fd, void *request, __uint32_t events)$/;"	f
epollfd	requestData.h	/^		int epollfd;$/;"	m	class:requestData
events	epoll.cpp	/^struct epoll_event* events;$/;"	v	typeref:struct:epoll_event
expired_time	requestData.h	/^    size_t expired_time;$/;"	m	struct:mytimer
fd	requestData.h	/^		int fd;$/;"	m	class:requestData
file_name	requestData.h	/^		std::string file_name;$/;"	m	class:requestData
function	threadpool.h	/^    void (*function)(void *);$/;"	m	struct:__anon2
getExpTime	requestData.cpp	/^size_t mytimer::getExpTime() const$/;"	f	class:mytimer
getFd	requestData.cpp	/^int requestData::getFd() const$/;"	f	class:requestData
getMime	requestData.cpp	/^std::string MimeType::getMime(const std::string &suffix)$/;"	f	class:MimeType
graceful_shutdown	threadpool.h	/^    graceful_shutdown  = 2$/;"	e	enum:__anon1
h_CR	requestData.h	/^    h_CR,$/;"	e	enum:HeadersState
h_LF	requestData.h	/^    h_LF,$/;"	e	enum:HeadersState
h_colon	requestData.h	/^    h_colon,$/;"	e	enum:HeadersState
h_end_CR	requestData.h	/^    h_end_CR,$/;"	e	enum:HeadersState
h_end_LF	requestData.h	/^    h_end_LF$/;"	e	enum:HeadersState
h_key	requestData.h	/^    h_key,$/;"	e	enum:HeadersState
h_spaces_after_colon	requestData.h	/^    h_spaces_after_colon,$/;"	e	enum:HeadersState
h_start	requestData.h	/^    h_start = 0,$/;"	e	enum:HeadersState
h_state	requestData.h	/^		int h_state;$/;"	m	class:requestData
h_value	requestData.h	/^    h_value,$/;"	e	enum:HeadersState
handleError	requestData.cpp	/^void requestData::handleError(int fd, int err_num, string short_msg)$/;"	f	class:requestData
handleRequest	requestData.cpp	/^void requestData::handleRequest()$/;"	f	class:requestData
handle_events	main.cpp	/^void handle_events(int epoll_fd, int listen_fd, struct epoll_event* events, int events_num, const string &path, threadpool_t* tp)$/;"	f
handle_expired_event	main.cpp	/^void handle_expired_event()$/;"	f
handle_for_sigpipe	util.cpp	/^void handle_for_sigpipe()$/;"	f
head	threadpool.h	/^    int head;$/;"	m	struct:threadpool_t
headers	requestData.h	/^		std::unordered_map<std::string, std::string> headers;$/;"	m	class:requestData
immediate_shutdown	threadpool.h	/^    immediate_shutdown = 1,$/;"	e	enum:__anon1
isDeleted	requestData.cpp	/^bool mytimer::isDeleted() const$/;"	f	class:mytimer
isfinish	requestData.h	/^		bool isfinish;$/;"	m	class:requestData
isvalid	requestData.cpp	/^bool mytimer::isvalid()$/;"	f	class:mytimer
keep_alive	requestData.h	/^		bool keep_alive;$/;"	m	class:requestData
lock	requestData.cpp	/^pthread_mutex_t MimeType::lock = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:MimeType	file:
lock	requestData.h	/^		static pthread_mutex_t lock;$/;"	m	class:MimeType
lock	threadpool.h	/^    pthread_mutex_t lock;$/;"	m	struct:threadpool_t
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
method	requestData.h	/^		int method;$/;"	m	class:requestData
mime	requestData.cpp	/^std::unordered_map<std::string, std::string> MimeType::mime;$/;"	m	class:MimeType	file:
mime	requestData.h	/^		static std::unordered_map<std::string, std::string> mime;$/;"	m	class:MimeType
myHandler	main.cpp	/^void myHandler(void *args)$/;"	f
myTimerQueue	requestData.cpp	/^std::priority_queue<mytimer*, std::deque<mytimer*>, timerCmp> myTimerQueue;$/;"	v
my_epoll_wait	epoll.cpp	/^int my_epoll_wait(int epoll_fd, struct epoll_event* events, int max_events, int timeout)$/;"	f
mytimer	requestData.cpp	/^mytimer::mytimer(requestData *_request_data, int timeout): deleted(false), request_data(_request_data)$/;"	f	class:mytimer
mytimer	requestData.h	/^struct mytimer$/;"	s
notify	threadpool.h	/^    pthread_cond_t notify;$/;"	m	struct:threadpool_t
now_read_pos	requestData.h	/^		int now_read_pos;$/;"	m	class:requestData
operator ()	requestData.cpp	/^bool timerCmp::operator()(const mytimer *a, const mytimer *b) const$/;"	f	class:timerCmp
parse_Headers	requestData.cpp	/^int requestData::parse_Headers()$/;"	f	class:requestData
parse_URI	requestData.cpp	/^int requestData::parse_URI()$/;"	f	class:requestData
path	requestData.h	/^		std::string path;$/;"	m	class:requestData
queue	threadpool.h	/^    threadpool_task_t *queue;$/;"	m	struct:threadpool_t
queue_size	threadpool.h	/^    int queue_size;$/;"	m	struct:threadpool_t
readn	util.cpp	/^ssize_t readn(int fd, void *buff, size_t n)$/;"	f
requestData	requestData.cpp	/^requestData::requestData(): againTimes(0), now_read_pos(0), $/;"	f	class:requestData
requestData	requestData.cpp	/^requestData::requestData(int _epollfd, int _fd, std::string _path):$/;"	f	class:requestData
requestData	requestData.h	/^class requestData$/;"	c
request_data	requestData.h	/^    requestData *request_data;$/;"	m	struct:mytimer
reset	requestData.cpp	/^void requestData::reset()$/;"	f	class:requestData
seperateTimer	requestData.cpp	/^void requestData::seperateTimer()$/;"	f	class:requestData
setDeleted	requestData.cpp	/^void mytimer::setDeleted()$/;"	f	class:mytimer
setFd	requestData.cpp	/^void requestData::setFd(int _fd)$/;"	f	class:requestData
setSocketNonBlocking	util.cpp	/^int setSocketNonBlocking(int fd)$/;"	f
shutdown	threadpool.h	/^    int shutdown;$/;"	m	struct:threadpool_t
socket_bind_listen	main.cpp	/^int socket_bind_listen(int port)$/;"	f
started	threadpool.h	/^    int started;$/;"	m	struct:threadpool_t
state	requestData.h	/^		int state;$/;"	m	class:requestData
tail	threadpool.h	/^    int tail;$/;"	m	struct:threadpool_t
thread_count	threadpool.h	/^    int thread_count;$/;"	m	struct:threadpool_t
threadpool_add	threadpool.cpp	/^int threadpool_add(threadpool_t *pool, void (*function)(void *), void *argument, int flags)$/;"	f
threadpool_create	threadpool.cpp	/^threadpool_t *threadpool_create(int thread_count, int queue_size, int flags)$/;"	f
threadpool_destroy	threadpool.cpp	/^int threadpool_destroy(threadpool_t *pool, int flags)$/;"	f
threadpool_free	threadpool.cpp	/^int threadpool_free(threadpool_t *pool)$/;"	f
threadpool_shutdown_t	threadpool.h	/^} threadpool_shutdown_t;$/;"	t	typeref:enum:__anon1
threadpool_t	threadpool.h	/^struct threadpool_t$/;"	s
threadpool_task_t	threadpool.h	/^} threadpool_task_t;$/;"	t	typeref:struct:__anon2
threadpool_thread	threadpool.cpp	/^static void *threadpool_thread(void *threadpool)$/;"	f	file:
threads	threadpool.h	/^    pthread_t *threads;$/;"	m	struct:threadpool_t
timer	requestData.h	/^		mytimer *timer;$/;"	m	class:requestData
timerCmp	requestData.h	/^struct timerCmp$/;"	s
update	requestData.cpp	/^void mytimer::update(int timeout)$/;"	f	class:mytimer
writen	util.cpp	/^ssize_t writen(int fd, void *buff, size_t n)$/;"	f
~mytimer	requestData.cpp	/^mytimer::~mytimer()$/;"	f	class:mytimer
~requestData	requestData.cpp	/^requestData::~requestData()$/;"	f	class:requestData
